{"entries":[{"timestamp":1727879221409,"editorVersion":"7.0.42","changes":[{"type":"edited","filename":"main.blocks","patch":[{"diffs":[[0,"http"],[-1,"s"],[0,"://"],[-1,"developers.google.com/blockly/xml\"><variables></variables><block type=\"pxt-on-start\" id=\"oD.A}*XsZjdu{J28FXqJ\" x=\"20\" y=\"20"],[1,"www.w3.org/1999/xhtml\">\n  <block type=\"pxt-on-start"],[0,"\"></"]],"start1":12,"start2":12,"length1":135,"length2":62},{"diffs":[[0,"</block>"],[1,"\n  "],[0,"<block t"]],"start1":72,"start2":72,"length1":16,"length2":19},{"diffs":[[0,"ver\""],[-1," id=\"/iml@K5(t}{!S`.R7q2E\" x=\"225\" y=\"20\""],[0,"></b"]],"start1":107,"start2":107,"length1":49,"length2":8},{"diffs":[[0,"</block>"],[1,"\n"],[0,"</xml>"]],"start1":112,"start2":112,"length1":14,"length2":15}]},{"type":"edited","filename":"main.ts","patch":[{"diffs":[[-1,"/*\nCopyright (C): 2010-2019, Shenzhen Yahboom Tech\nmodified from liusen\nload dependency\n\"SuperBit\": \"file:../pxt-Superbit\"\n*/\n\n//% color=\"#ECA40D\" weight=20 icon=\"\\uf085\"\nnamespace SuperBit {\n\n    const PCA9685_ADD = 0x40\n    const MODE1 = 0x00\n    const MODE2 = 0x01\n    const SUBADR1 = 0x02\n    const SUBADR2 = 0x03\n    const SUBADR3 = 0x04\n\n    const LED0_ON_L = 0x06\n    const LED0_ON_H = 0x07\n    const LED0_OFF_L = 0x08\n    const LED0_OFF_H = 0x09\n\n    const ALL_LED_ON_L = 0xFA\n    const ALL_LED_ON_H = 0xFB\n    const ALL_LED_OFF_L = 0xFC\n    const ALL_LED_OFF_H = 0xFD\n\n    const PRESCALE = 0xFE\n\n    const STP_CHA_L = 2047\n    const STP_CHA_H = 4095\n\n    const STP_CHB_L = 1\n    const STP_CHB_H = 2047\n\n    const STP_CHC_L = 1023\n    const STP_CHC_H = 3071\n\n    const STP_CHD_L = 3071\n    const STP_CHD_H = 1023\n\n    let initialized = false\n    let yahStrip: neopixel.Strip;\n\n\n    export enum enMusic {\n\n        dadadum = 0,\n        entertainer,\n        prelude,\n        ode,\n        nyan,\n        ringtone,\n        funk,\n        blues,\n\n        birthday,\n        wedding,\n        funereal,\n        punchline,\n        baddy,\n        chase,\n        ba_ding,\n        wawawawaa,\n        jump_up,\n        jump_down,\n        power_up,\n        power_down\n    }\n\n\n\n    export enum enSteppers {\n        B1 = 0x1,\n        B2 = 0x2\n    }\n    export enum enPos {\n        //% blockId=\"forward\" block=\"forward\"\n        forward = 1,\n        //% blockId=\"reverse\" block=\"reverse\"\n        reverse = 2,\n        //% blockId=\"stop\" block=\"stop\"\n        stop = 3\n    }\n\n    export enum enTurns {\n        //% blockId=\"T1B4\" block=\"1/4\"\n        T1B4 = 90,\n        //% blockId=\"T1B2\" block=\"1/2\"\n        T1B2 = 180,\n        //% blockId=\"T1B0\" block=\"1\"\n        T1B0 = 360,\n        //% blockId=\"T2B0\" block=\"2\"\n        T2B0 = 720,\n        //% blockId=\"T3B0\" block=\"3\"\n        T3B0 = 1080,\n        //% blockId=\"T4B0\" block=\"4\"\n        T4B0 = 1440,\n        //% blockId=\"T5B0\" block=\"5\"\n        T5B0 = 1800\n    }\n\n    export enum enServo {\n\n        S1 = 0,\n        S2,\n        S3,\n        S4,\n        S5,\n        S6,\n        S7,\n        S8\n    }\n    export enum enMotors {\n        M1 = 8,\n        M2 = 10,\n        M3 = 12,\n        M4 = 14\n    }\n\n    function i2cwrite(addr: number, reg: number, value: number) {\n        let buf = pins.createBuffer(2)\n        buf[0] = reg\n        buf[1] = value\n        pins.i2cWriteBuffer(addr, buf)\n    }\n\n    function i2ccmd(addr: number, value: number) {\n        let buf = pins.createBuffer(1)\n        buf[0] = value\n        pins.i2cWriteBuffer(addr, buf)\n    }\n\n    function i2cread(addr: number, reg: number) {\n        pins.i2cWriteNumber(addr, reg, NumberFormat.UInt8BE);\n        let val = pins.i2cReadNumber(addr, NumberFormat.UInt8BE);\n        return val;\n    }\n\n    function initPCA9685(): void {\n        i2cwrite(PCA9685_ADD, MODE1, 0x00)\n        setFreq(50);\n        initialized = true\n    }\n\n    function setFreq(freq: number): void {\n        // Constrain the frequency\n        let prescaleval = 25000000;\n        prescaleval /= 4096;\n        prescaleval /= freq;\n        prescaleval -= 1;\n        let prescale = prescaleval; //Math.Floor(prescaleval + 0.5);\n        let oldmode = i2cread(PCA9685_ADD, MODE1);\n        let newmode = (oldmode & 0x7F) | 0x10; // sleep\n        i2cwrite(PCA9685_ADD, MODE1, newmode); // go to sleep\n        i2cwrite(PCA9685_ADD, PRESCALE, prescale); // set the prescaler\n        i2cwrite(PCA9685_ADD, MODE1, oldmode);\n        control.waitMicros(5000);\n        i2cwrite(PCA9685_ADD, MODE1, oldmode | 0xa1);\n    }\n\n    function setPwm(channel: number, on: number, off: number): void {\n        if (channel < 0 || channel > 15)\n            return;\n        if (!initialized) {\n            initPCA9685();\n        }\n        let buf = pins.createBuffer(5);\n        buf[0] = LED0_ON_L + 4 * channel;\n        buf[1] = on & 0xff;\n        buf[2] = (on >> 8) & 0xff;\n        buf[3] = off & 0xff;\n        buf[4] = (off >> 8) & 0xff;\n        pins.i2cWriteBuffer(PCA9685_ADD, buf);\n    }\n\n    function setStepper(index: number, dir: boolean): void {\n        if (index == enSteppers.B1) {\n            if (dir) {\n                setPwm(11, STP_CHA_L, STP_CHA_H);\n                setPwm(9, STP_CHB_L, STP_CHB_H);\n                setPwm(10, STP_CHC_L, STP_CHC_H);\n                setPwm(8, STP_CHD_L, STP_CHD_H);\n            } else {\n                setPwm(8, STP_CHA_L, STP_CHA_H);\n                setPwm(10, STP_CHB_L, STP_CHB_H);\n                setPwm(9, STP_CHC_L, STP_CHC_H);\n                setPwm(11, STP_CHD_L, STP_CHD_H);\n            }\n        } else {\n            if (dir) {\n                setPwm(12, STP_CHA_L, STP_CHA_H);\n                setPwm(14, STP_CHB_L, STP_CHB_H);\n                setPwm(13, STP_CHC_L, STP_CHC_H);\n                setPwm(15, STP_CHD_L, STP_CHD_H);\n            } else {\n                setPwm(15, STP_CHA_L, STP_CHA_H);\n                setPwm(13, STP_CHB_L, STP_CHB_H);\n                setPwm(14, STP_CHC_L, STP_CHC_H);\n                setPwm(12, STP_CHD_L, STP_CHD_H);\n            }\n        }\n    }\n\n    function stopMotor(index: number) {\n        setPwm(index, 0, 0);\n        setPwm(index + 1, 0, 0);\n    }\n    /**\n     * *****************************************************************\n     * @param index\n     */\n    //% blockId=SuperBit_RGB_Program block=\"RGB_Program\"\n    //% weight=99\n    //% blockGap=10\n    //% name.fieldEditor=\"gridpicker\" name.fieldOptions.columns=4\n    export function RGB_Program(): neopixel.Strip {\n\n        if (!yahStrip) {\n            yahStrip = neopixel.create(DigitalPin.P12, 4, NeoPixelMode.RGB);\n        }\n        return yahStrip;\n    }\n\n    //% blockId=SuperBit_Music block=\"Music|%index\"\n    //% weight=98\n    //% blockGap=10\n    //% name.fieldEditor=\"gridpicker\" name.fieldOptions.columns=4\n    export function Music(index: enMusic): void {\n        switch (index) {\n            case enMusic.dadadum: music.beginMelody(music.builtInMelody(Melodies.Dadadadum), MelodyOptions.Once); break;\n            case enMusic.birthday: music.beginMelody(music.builtInMelody(Melodies.Birthday), MelodyOptions.Once); break;\n            case enMusic.entertainer: music.beginMelody(music.builtInMelody(Melodies.Entertainer), MelodyOptions.Once); break;\n            case enMusic.prelude: music.beginMelody(music.builtInMelody(Melodies.Prelude), MelodyOptions.Once); break;\n            case enMusic.ode: music.beginMelody(music.builtInMelody(Melodies.Ode), MelodyOptions.Once); break;\n            case enMusic.nyan: music.beginMelody(music.builtInMelody(Melodies.Nyan), MelodyOptions.Once); break;\n            case enMusic.ringtone: music.beginMelody(music.builtInMelody(Melodies.Ringtone), MelodyOptions.Once); break;\n            case enMusic.funk: music.beginMelody(music.builtInMelody(Melodies.Funk), MelodyOptions.Once); break;\n            case enMusic.blues: music.beginMelody(music.builtInMelody(Melodies.Blues), MelodyOptions.Once); break;\n            case enMusic.wedding: music.beginMelody(music.builtInMelody(Melodies.Wedding), MelodyOptions.Once); break;\n            case enMusic.funereal: music.beginMelody(music.builtInMelody(Melodies.Funeral), MelodyOptions.Once); break;\n            case enMusic.punchline: music.beginMelody(music.builtInMelody(Melodies.Punchline), MelodyOptions.Once); break;\n            case enMusic.baddy: music.beginMelody(music.builtInMelody(Melodies.Baddy), MelodyOptions.Once); break;\n            case enMusic.chase: music.beginMelody(music.builtInMelody(Melodies.Chase), MelodyOptions.Once); break;\n            case enMusic.ba_ding: music.beginMelody(music.builtInMelody(Melodies.BaDing), MelodyOptions.Once); break;\n            case enMusic.wawawawaa: music.beginMelody(music.builtInMelody(Melodies.Wawawawaa), MelodyOptions.Once); break;\n            case enMusic.jump_up: music.beginMelody(music.builtInMelody(Melodies.JumpUp), MelodyOptions.Once); break;\n            case enMusic.jump_down: music.beginMelody(music.builtInMelody(Melodies.JumpDown), MelodyOptions.Once); break;\n            case enMusic.power_up: music.beginMelody(music.builtInMelody(Melodies.PowerUp), MelodyOptions.Once); break;\n            case enMusic.power_down: music.beginMelody(music.builtInMelody(Melodies.PowerDown), MelodyOptions.Once); break;\n        }\n    }\n\n    //% blockId=SuperBit_Servo block=\"Servo(180°)|num %num|value %value\"\n    //% weight=97\n    //% blockGap=10\n    //% num.min=1 num.max=4 value.min=0 value.max=180\n    //% name.fieldEditor=\"gridpicker\" name.fieldOptions.columns=20\n    export function Servo(num: enServo, value: number): void {\n\n        // 50hz: 20,000 us\n        let us = (value * 1800 / 180 + 600); // 0.6 ~ 2.4\n        let pwm = us * 4096 / 20000;\n        setPwm(num, 0, pwm);\n\n    }\n\n    //% blockId=SuperBit_Servo2 block=\"Servo(270°)|num %num|value %value\"\n    //% weight=96\n    //% blockGap=10\n    //% num.min=1 num.max=4 value.min=0 value.max=270\n    //% name.fieldEditor=\"gridpicker\" name.fieldOptions.columns=20\n    export function Servo2(num: enServo, value: number): void {\n\n        // 50hz: 20,000 us\n        let newvalue = Math.map(value, 0, 270, 0, 180);\n        let us = (newvalue * 1800 / 180 + 600); // 0.6 ~ 2.4\n        let pwm = us * 4096 / 20000;\n        setPwm(num, 0, pwm);\n\n    }\n\n    //% blockId=SuperBit_Servo3 block=\"Servo(360°)|num %num|pos %pos|value %value\"\n    //% weight=96\n    //% blockGap=10\n    //% num.min=1 num.max=4 value.min=0 value.max=90\n    //% name.fieldEditor=\"gridpicker\" name.fieldOptions.columns=20\n    export function Servo3(num: enServo, pos: enPos, value: number): void {\n\n        // 50hz: 20,000 us\n\n        if (pos == enPos.stop) {\n            let us = (86 * 1800 / 180 + 600); // 0.6 ~ 2.4\n            let pwm = us * 4096 / 20000;\n            setPwm(num, 0, pwm);\n        }\n        else if (pos == enPos.forward) { //0-90 -> 90 - 0\n            let us = ((90 - value) * 1800 / 180 + 600); // 0.6 ~ 2.4\n            let pwm = us * 4096 / 20000;\n            setPwm(num, 0, pwm);\n        }\n        else if (pos == enPos.reverse) { //0-90 -> 90 -180\n            let us = ((90 + value) * 1800 / 180 + 600); // 0.6 ~ 2.4\n            let pwm = us * 4096 / 20000;\n            setPwm(num, 0, pwm);\n        }\n\n\n\n    }\n    //% blockId=SuperBit_MotorRun block=\"Motor|%index|speed(-255~255) %speed\"\n    //% weight=93\n    //% speed.min=-255 speed.max=255\n    //% name.fieldEditor=\"gridpicker\" name.fieldOptions.columns=4\n    export function MotorRun(index: enMotors, speed: number): void {\n        if (!initialized) {\n            initPCA9685()\n        }\n        speed = speed * 16; // map 255 to 4096\n        if (speed >= 4096) {\n            speed = 4095\n        }\n        if (speed <= -4096) {\n            speed = -4095\n        }\n\n        let a = index\n        let b = index + 1\n\n        if (a > 10) {\n            if (speed >= 0) {\n                setPwm(a, 0, speed)\n                setPwm(b, 0, 0)\n            } else {\n                setPwm(a, 0, 0)\n                setPwm(b, 0, -speed)\n            }\n        }\n        else {\n            if (speed >= 0) {\n                setPwm(b, 0, speed)\n                setPwm(a, 0, 0)\n            } else {\n                setPwm(b, 0, 0)\n                setPwm(a, 0, -speed)\n            }\n        }\n\n    }\n\n\n\n    //% blockId=SuperBit_MotorRunDual block=\"Motor|%motor1|speed %speed1|%motor2|speed %speed2\"\n    //% weight=92\n    //% blockGap=50\n    //% speed1.min=-255 speed1.max=255\n    //% speed2.min=-255 speed2.max=255\n    //% name.fieldEditor=\"gridpicker\" name.fieldOptions.columns=2\n    export function MotorRunDual(motor1: enMotors, speed1: number, motor2: enMotors, speed2: number): void {\n        MotorRun(motor1, speed1);\n        MotorRun(motor2, speed2);\n    }\n\n    //% blockId=SuperBit_StepperDegree block=\"Stepper Motor(28BYJ-48) |%index|degree %degree\"\n    //% weight=90\n    export function StepperDegree(index: enSteppers, degree: number): void {\n        if (!initialized) {\n            initPCA9685()\n        }\n        setStepper(index, degree > 0);\n        degree = Math.abs(degree);\n        basic.pause(10240 * degree / 360);\n        MotorStopAll()\n    }\n\n    //% blockId=SuperBit_MotorStopAll block=\"Motor Stop All\"\n    //% weight=91\n    //% blockGap=50\n    export function MotorStopAll(): void {\n        if (!initialized) {\n            initPCA9685()\n        }\n\n        stopMotor(enMotors.M1);\n        stopMotor(enMotors.M2);\n        stopMotor(enMotors.M3);\n        stopMotor(enMotors.M4);\n\n    }\n\n    //% blockId=SuperBit_StepperTurn block=\"Stepper Motor(28BYJ-48) |%index|turn %turn|circle\"\n    //% weight=89\n    export function StepperTurn(index: enSteppers, turn: enTurns): void {\n        let degree = turn;\n        StepperDegree(index, degree);\n    }\n\n    //% blockId=SuperBit_StepperDual block=\"Dual Stepper Motor(Degree) |M1 %degree1| M2 %degree2\"\n    //% weight=88\n    export function StepperDual(degree1: number, degree2: number): void {\n        if (!initialized) {\n            initPCA9685()\n        }\n        setStepper(1, degree1 > 0);\n        setStepper(2, degree2 > 0);\n        degree1 = Math.abs(degree1);\n        degree2 = Math.abs(degree2);\n        basic.pause(10240 * Math.min(degree1, degree2) / 360);\n        if (degree1 > degree2) {\n            stopMotor(enMotors.M3);\n            stopMotor(enMotors.M4);\n            basic.pause(10240 * (degree1 - degree2) / 360);\n        } else {\n            stopMotor(enMotors.M1);\n            stopMotor(enMotors.M2);\n            basic.pause(10240 * (degree2 - degree1) / 360);\n        }\n\n        MotorStopAll()\n    }\n\n    //% blockId=SuperBit_PWMOFF block=\"PWM OFF|%index\"\n    //% weight=87\n    export function PWMOFF(index: number): void {\n        setPwm(index, 0, 0);\n    }\n\n}"],[1,"\n"]],"start1":0,"start2":0,"length1":13673,"length2":1}]},{"type":"edited","filename":"pxt.json","patch":[{"diffs":[[0," \"*\""],[-1,",\n        \"neopixel\": \"github:microsoft/pxt-neopixel#v0.7.6\""],[0,"\n"],[1,""],[0,"    "]],"start1":142,"start2":142,"length1":69,"length2":9},{"diffs":[[0,"   \""],[-1,"testFiles\": [\n        \"test.ts\"\n    ],\n    \"preferredEditor\": \"tsprj\""],[1,"additionalFilePaths\": []"],[0,"\n}\n"]],"start1":239,"start2":239,"length1":76,"length2":31}]},{"type":"added","filename":"test.ts","value":"// tests go here; this will not be compiled when this package is used as an extension.\n"}]}],"snapshots":[{"timestamp":1727879221408,"editorVersion":"7.0.42","text":{"main.blocks":"<xml xmlns=\"http://www.w3.org/1999/xhtml\">\n  <block type=\"pxt-on-start\"></block>\n  <block type=\"device_forever\"></block>\n</xml>","main.ts":"\n","README.md":"","pxt.json":"{\n    \"name\": \"Super Bit Basic\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\"\n    ],\n    \"additionalFilePaths\": []\n}\n"}}],"shares":[],"lastSaveTime":1727879266415}